// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct FairLaunchProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for FairLaunchProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = FairLaunchProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        FairLaunchProxyMethods { wrapped_tx: tx }
    }
}

pub struct FairLaunchProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> FairLaunchProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    /// Percentages have to be between 0 and 10_000 
    /// Start percentage >= End percentage 
    pub fn init<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<u32>,
        Arg4: ProxyArg<u32>,
        Arg5: ProxyArg<u32>,
        Arg6: ProxyArg<u32>,
    >(
        self,
        initial_launch_duration_blocks: Arg0,
        account_buy_limit: Arg1,
        tx_buy_limit: Arg2,
        buy_fee_percentage_start: Arg3,
        buy_fee_percentage_end: Arg4,
        sell_fee_percentage_start: Arg5,
        sell_fee_percentage_end: Arg6,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&initial_launch_duration_blocks)
            .argument(&account_buy_limit)
            .argument(&tx_buy_limit)
            .argument(&buy_fee_percentage_start)
            .argument(&buy_fee_percentage_end)
            .argument(&sell_fee_percentage_start)
            .argument(&sell_fee_percentage_end)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> FairLaunchProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> FairLaunchProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn token_fees<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        token_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u32> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTokenFees")
            .argument(&token_id)
            .original_result()
    }

    /// Arguments: endpoint_name, 
    /// input_fee_percentage: between 0 and 10_000, 
    /// burn_input: bool, burn input tokens taken as fee, 
    /// output_fee_percentage: between 0 and 10_000, 
    /// burn_output: bool, burn output taken as fee 
    pub fn add_exchange_endpoint<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<MultiValueEncoded<Env::Api, MultiValue5<ManagedBuffer<Env::Api>, u32, bool, u32, bool>>>,
    >(
        self,
        sc_addr: Arg0,
        endpoint_name_fee_percentage_pairs: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addExchangeEndpoint")
            .argument(&sc_addr)
            .argument(&endpoint_name_fee_percentage_pairs)
            .original_result()
    }

    pub fn remove_exchange_endpoint<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        sc_addr: Arg0,
        endpoint_names: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeExchangeEndpoint")
            .argument(&sc_addr)
            .argument(&endpoint_names)
            .original_result()
    }

    /// forward an execute on dest context call on an exchange SC 
    pub fn forward_execute_on_dest<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        dest: Arg0,
        endpoint_name: Arg1,
        extra_args: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("forwardExecuteOnDest")
            .argument(&dest)
            .argument(&endpoint_name)
            .argument(&extra_args)
            .original_result()
    }

    pub fn buy_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        pair_adddress: Arg0,
        amount_out_min: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, EsdtTokenPayment<Env::Api>> {
        self.wrapped_tx
            .raw_call("buyToken")
            .argument(&pair_adddress)
            .argument(&amount_out_min)
            .original_result()
    }

    pub fn sell_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        pair_adddress: Arg0,
        out_token_id: Arg1,
        amount_out_min: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, EsdtTokenPayment<Env::Api>> {
        self.wrapped_tx
            .raw_call("sellToken")
            .argument(&pair_adddress)
            .argument(&out_token_id)
            .argument(&amount_out_min)
            .original_result()
    }

    pub fn issue_token<
        Arg0: ProxyArg<EsdtTokenType>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<usize>,
    >(
        self,
        token_type: Arg0,
        token_display_name: Arg1,
        token_ticker: Arg2,
        num_decimals: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("issueToken")
            .argument(&token_type)
            .argument(&token_display_name)
            .argument(&token_ticker)
            .argument(&num_decimals)
            .original_result()
    }

    pub fn set_transfer_role(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setTransferRole")
            .original_result()
    }

    /// Percentage should be between 0 and 10_000 
    pub fn set_token_fees<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u32>,
    >(
        self,
        token_id: Arg0,
        fees_percentage: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setTokenFees")
            .argument(&token_id)
            .argument(&fees_percentage)
            .original_result()
    }

    /// users in whitelist can transfer without fees 
    pub fn add_users_to_whitelist<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        users: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addUsersToWhitelist")
            .argument(&users)
            .original_result()
    }

    pub fn remove_users_from_whitelist<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        users: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeUsersFromWhitelist")
            .argument(&users)
            .original_result()
    }

    /// Forward the transfer to the specified address 
    /// Part of the tokens is taken as fees 
    /// If the destination is a SC, the first argument is the function name 
    pub fn forward_transfer<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        dest: Arg0,
        extra_args: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("forwardTransfer")
            .argument(&dest)
            .argument(&extra_args)
            .original_result()
    }

    pub fn pause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pause")
            .original_result()
    }

    pub fn unpause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unpause")
            .original_result()
    }

    pub fn paused_status(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isPaused")
            .original_result()
    }
}
