// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct MvxGameScProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for MvxGameScProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = MvxGameScProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        MvxGameScProxyMethods { wrapped_tx: tx }
    }
}

pub struct MvxGameScProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> MvxGameScProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<OptionalValue<bool>>,
        Arg1: ProxyArg<OptionalValue<BigUint<Env::Api>>>,
        Arg2: ProxyArg<OptionalValue<EgldOrEsdtTokenIdentifier<Env::Api>>>,
    >(
        self,
        enabled_opt: Arg0,
        game_start_fee_opt: Arg1,
        token_id_opt: Arg2,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&enabled_opt)
            .argument(&game_start_fee_opt)
            .argument(&token_id_opt)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> MvxGameScProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn create_game<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        waiting_time: Arg0,
        number_of_players_min: Arg1,
        number_of_players_max: Arg2,
        wager: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, u64> {
        self.wrapped_tx
            .raw_call("createGame")
            .argument(&waiting_time)
            .argument(&number_of_players_min)
            .argument(&number_of_players_max)
            .argument(&wager)
            .original_result()
    }

    pub fn join_game<
        Arg0: ProxyArg<u64>,
    >(
        self,
        game_id: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("joinGame")
            .argument(&game_id)
            .original_result()
    }

    pub fn claim_back_wager<
        Arg0: ProxyArg<u64>,
    >(
        self,
        game_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimBackWager")
            .argument(&game_id)
            .original_result()
    }

    pub fn token_id(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, EgldOrEsdtTokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTokenId")
            .original_result()
    }

    pub fn game_start_fee(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getGameStartFee")
            .original_result()
    }

    pub fn enabled(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getEnabled")
            .original_result()
    }

    pub fn is_user_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isUserAdmin")
            .argument(&user)
            .original_result()
    }

    pub fn last_game_id(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLastGameId")
            .original_result()
    }

    pub fn game_settings<
        Arg0: ProxyArg<u64>,
    >(
        self,
        game_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, GameSettings<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getGameSettings")
            .argument(&game_id)
            .original_result()
    }

    pub fn game_id<
        Arg0: ProxyArg<GameSettings<Env::Api>>,
    >(
        self,
        game_settings: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getGameIdBySettings")
            .argument(&game_settings)
            .original_result()
    }

    pub fn players<
        Arg0: ProxyArg<u64>,
    >(
        self,
        game_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPlayers")
            .argument(&game_id)
            .original_result()
    }

    pub fn games_per_user<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getGamesPerUser")
            .argument(&user)
            .original_result()
    }

    pub fn send_reward<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<OptionalValue<MultiValueEncoded<Env::Api, (ManagedAddress<Env::Api>, u64)>>>,
    >(
        self,
        game_id: Arg0,
        winners: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("sendReward")
            .argument(&game_id)
            .argument(&winners)
            .original_result()
    }

    pub fn enable_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("enableSC")
            .original_result()
    }

    pub fn disable_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("disableSC")
            .original_result()
    }

    pub fn set_token_id<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
    >(
        self,
        token_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setTokenId")
            .argument(&token_id)
            .original_result()
    }

    pub fn set_game_start_fee<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        amount: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setGameStartFee")
            .argument(&amount)
            .original_result()
    }

    pub fn set_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setAdmin")
            .argument(&user)
            .original_result()
    }

    pub fn remove_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeAdmin")
            .argument(&user)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, ManagedVecItem, Debug, PartialEq)]
pub struct GameSettings<Api>
where
    Api: ManagedTypeApi,
{
    pub time_limit: u64,
    pub number_of_players_min: u64,
    pub number_of_players_max: u64,
    pub wager: BigUint<Api>,
    pub creator: ManagedAddress<Api>,
    pub status: Status,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, ManagedVecItem, Debug, PartialEq)]
pub enum Status {
    Valid,
    Invalid,
}
